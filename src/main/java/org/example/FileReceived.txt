# 说明

implement a reliable transport protocol called STP (Simple Transport Protocol) in Java. STP is designed to provide a byte-stream abstraction, like TCP, and sends pipelined data segments using a sliding window. Unlike TCP, STP does not implement congestion control or flow control. It also features an asymmetric design, with two distinct STP endpoints: the "sender" and the "receiver". Data packets flow from the sender to the receiver, while acknowledgements flow in the reverse direction.

To initiate the sender, use the following command:

```
java Sender sender_port receiver_port FileToSend.txt max_win rto
```

To initiate the receiver, use the following command:

```
java Receiver receiver_port sender_port FileReceived.txt flp rlp
```

Here's an overview of the project requirements:

1. Establish a connection using a two-way handshake (SYN, ACK).
2. Choose a random initial sequence number (ISN) and perform sequence number arithmetic modulo 2^16.
3. Implement a one-directional (forward) connection termination (FIN, ACK).
4. Implement a sliding window protocol like TCP, with a buffer to store unacknowledged segments and limited by maxWin.
5. Encapsulate STP segments (Data, SYN, FIN) in UDP segments and transmit through a UDP socket.
6. Maintain a single timer for retransmission of data segments based on the supplied rto value.
7. Implement simplified TCP sender functionality and fast retransmit on three duplicate ACKs.
8. Use the "seqno" field for both sequence numbers and cumulative acknowledgments.
9. Process received ACK segments from the receiver through the same socket used for data transmission.
10. Maintain a log file titled "Sender_log.txt" to record information about each segment sent and received.

Once the file transfer is complete, the sender should print the following statistics at the end of the log file:

- Amount of (original) Data Transferred (in bytes) (excluding retransmissions)
- Number of Data Segments Sent (excluding retransmissions)
- Number of Retransmitted Data Segments
- Number of Duplicate Acknowledgements received

The sender should finish execution after the file transfer is complete and should not print any output to the terminal.

# 已经完成的部分

flp, rlp ,SYN, rto



# 

# 握手



# 重传

If a corresponding ACK is not received within rto msec, the sender should retransmit the SYN segment.



For example, the following shows the log file for a sender that transmits 3000 bytes of data and the **rto** is 100 msec. The ISN chosen is 4521 and max_win is 3000 bytes. Notice that the third data packet is dropped and is hence retransmitted after a timeout interval of 100 msec.

# 关闭

If a corresponding ACK is not received within **rto** msec, the sender should retransmit the SYN segment. If the SYN segment is not acknowledged after three retransmission attempts, a RESET segment must be sent to the destination port and the sender moves to the CLOSED state.



If one end point detects behaviour that is unexpected, it should reset the connection (i.e., close the connection) by sending a RESET segment. For example, if the receiver receives a data segment while it is in the SYN state (where it is expecting a SYN segment). A message should be printed to the terminal indicating that the connection is being reset. The state transition diagram on the previous page does not capture such erroneous scenarios. Note that, we will NOT be rigorously testing your code for such unexpected behaviour.



If the ACK is not received before a timeout (rto msec), the sender should retransmit the SYN. If the SYN segment is not acknowledged after three retransmission attempts, a RESET segment must be sent to the receiver and the sender moves to the CLOSED state.



The receiver will only print a message altering of a closure of the connection due to a RESET packet to the terminal. No other output will be displayed.

# 格式

<snd/rcv> <time> <type of packet> <seq-number> <number-of-bytes>

the SYN segment will always be sent at time 0.

where <type of packet> could be SYN, ACK, FIN, DATA and RESET and the fields should be tab separated. Time should be in milliseconds and relative to when the SYN segment was sent – i.e., the SYN segment will always be sent at time 0. The number of bytes should be zero for all segments other than data segments.



# 概率

flp: determines the probability of a segment (data, SYN, and FIN) in the forward direction from the sender being dropped. In other words, each segment arriving at the receiver socket will be dropped with a probability flp.



rlp: determines the probability of an ACK packet created by the receiver being dropped. In other words, each ACK segment created by the receiver will be dropped with a probability rlp.If the ACK segment is not dropped, then it will be transmitted through the socket to the sender.



During connection teardown, the sender must transmit a FIN segment, start a timer (rto) and wait for an ACK.

# window

The receive window should be zero for all segments other than ACK segments.





# 多线程





# log

Once the entire file has been transmitted reliably and the connection is closed (remember to follow the state machine for the receiver), the receiver will also print the following statistics at the end of the log file (i.e., Receiver_log.txt):



• Amount of (original) Data Received (in bytes) – does not include retransmitted data

• Number of (original) Data Segments Received

• Number of duplicate Data segments received (if any)

• Number of Data segments dropped

• Number of ACK segments dropped



Once the entire file has been transmitted reliably and the connection is closed, the sender should also print the following statistics at the end of the log file (i.e., Sender_log.txt):

• Amount of (original) Data Transferred (in bytes) (excluding retransmissions)

• Number of Data Segments Sent (excluding retransmissions)

• Number of Retransmitted Data Segments

• Number of Duplicate Acknowledgements received
